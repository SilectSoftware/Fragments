<ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<!--
%%
Description:
  A Rule which runs a timed PowerShell script (no parameters) as the DataSource and ALERTS based on matching a condition detection
Version: 1.0
LastModified: 13-Aug-2017
%%

In this fragment you need to replace:
  ##CompanyID##
  ##AppName##
  ##ClassID##

This fragment depends on references:
  RequiredReference: Alias="System", ID="System.Library"
  RequiredReference: Alias="Windows", ID="Microsoft.Windows.Library"
  RequiredReference: Alias="Health", ID="System.Health.Library"	
--> 
  <TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="##CompanyID##.##AppName##.TimedScript.PowerShell.DataSourceModuleType" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
		  <xsd:element type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />		
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PSProbe" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>##CompanyID##.##AppName##.TimedScript.PowerShell.DataSourceModuleType.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Description of Script here
#=================================================================================

#=================================================================================
# Constants section - modify stuff here:

# Assign script name variable for use in event logging
$ScriptName = "##CompanyID##.##AppName##.TimedScript.PowerShell.DataSourceModuleType.ps1"
#=================================================================================

# Gather script start time
$StartTime = Get-Date             

# Gather who the script is running as
$whoami = whoami

# Load MomScript API and PropertyBag function 
$momapi = new-object -comObject 'MOM.ScriptAPI'
$bag = $momapi.CreatePropertyBag()

#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,1234,0, "`n Starting script. `n Running as ($whoami).")

#Main script section
#=================================================================================

#For a simple example - get files in Windows Temp:
[int]$TempCount = (Get-ChildItem C:\Windows\Temp).Count

IF ($TempCount -lt 1)
{
  $Result = "BAD"
  $Message = "The number of files in temp was zero or we failed to get the data"
}
ELSEIF ($TempCount -ge 20)
{
  $Result = "BAD"
  $Message = "The number of files in temp was greater than 20"
}
ELSE
{
  $Result = "GOOD"
}


#Check the value of Result
IF ($Result -eq "GOOD")
  {
  $momapi.LogScriptEvent($ScriptName,1234,0, "`n Good Condition Found `n FilesInTemp = ($TempCount)")
  $bag.AddValue('Result',$Result)
  }
ELSE
  {
  $momapi.LogScriptEvent($ScriptName,1234,0, "`n Bad Condition Found. `n FilesInTemp = ($TempCount)")
  $bag.AddValue('Result',$Result)
  $bag.AddValue('TempCount',$TempCount)
  $bag.AddValue('Message',$Message)
  }

#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,1234,0,"`n Script has completed. `n Runtime was ($ScriptTime) seconds.")

#Output the propertybag  
$bag
</ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>			  
            </MemberModules>
            <Composition>
              <Node ID="PSProbe">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
    </ModuleTypes>
  </TypeDefinitions>
  <Monitoring>
    <Rules>
      <Rule ID="##CompanyID##.##AppName##.TimedScript.PowerShell.Alert.Rule" Enabled="true" Target="##ClassID##" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="##CompanyID##.##AppName##.TimedScript.PowerShell.DataSourceModuleType">
            <IntervalSeconds>60</IntervalSeconds>
            <TimeoutSeconds>60</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="CD" TypeID="System!System.ExpressionFilter">
		  <Expression>
		    <SimpleExpression>
			  <ValueExpression>
			    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
			  </ValueExpression>
			  <Operator>Equal</Operator>
			  <ValueExpression>
			    <Value Type="String">BAD</Value>
			  </ValueExpression>
		    </SimpleExpression>
		  </Expression>
        </ConditionDetection>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>  <!-- 0=Low, 1=Medium, 2=High -->
            <Severity>1</Severity>  <!-- 0=Information, 1=Warning, 2=Critical -->
            <AlertMessageId>$MPElement[Name="##CompanyID##.##AppName##.TimedScript.PowerShell.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Result']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='TempCount']$</AlertParameter2>
			  <AlertParameter3>$Data/Property[@Name='Message']$</AlertParameter3>
            </AlertParameters>
			<Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
    </Rules>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="##CompanyID##.##AppName##.TimedScript.PowerShell.Alert.Rule.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="##CompanyID##.##AppName##.TimedScript.PowerShell.Alert.Rule">
          <Name>##CompanyID## ##AppName## TimedScript PowerShell Alert Rule</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="##CompanyID##.##AppName##.TimedScript.PowerShell.Alert.Rule.AlertMessage">
          <Name>##CompanyID## ##AppName## TimedScript PowerShell Alert Rule Triggered</Name>
          <Description>##CompanyID## ##AppName## TimedScript PowerShell Alert Rule: detected a bad condition
Result: {0}
Files in Temp: {1}
Message: {2}</Description>
        </DisplayString>		
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPackFragment>
