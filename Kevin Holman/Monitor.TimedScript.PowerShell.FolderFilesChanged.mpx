<ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<!--
%%
Description:
  A MONITOR which runs a timed PowerShell script and inspects a FolderPath for changes since a reference date
  The script queries a folder for any changed files and folders newer than a set date and the output submitted by the script in a propertybag.
  CompanyID - is a short abbreviation for your company with NO SPACES OR SPECIAL CHARACTERS ALLOWED
  AppName - is a short name for your app with NO SPACES OR SPECIAL CHARACTERS ALLOWED  
  ClassID - is the targeted class such as your custom class or Windows!Microsoft.Windows.Server.OperatingSystem  
  UniqueID - Is a unique short description of the monitor purpose (NO SPACES OR SPECIAL CHARACTERS ALLOWED) such as "MonitorFilesInFolder"
  
Version: 1.0
LastModified: 12-Feb-2019
%%

In this fragment you need to replace:
  ##CompanyID##
  ##AppName##
  ##ClassID##
  ##UniqueID##  

This fragment depends on references:  
  RequiredReference: Alias="System", ID="System.Library"
  RequiredReference: Alias="Windows", ID="Microsoft.Windows.Library"
  RequiredReference: Alias="Health", ID="System.Health.Library"
  
@@Author=Kevin Holman@@    
--> 
	<TypeDefinitions>
		<ModuleTypes>
			<DataSourceModuleType ID="##CompanyID##.##AppName##.##UniqueID##.Monitor.DataSource" Accessibility="Internal" Batching="false">
				<Configuration>
					<xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>
					<xsd:element minOccurs="0" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>
					<xsd:element minOccurs="1" name="FileDateThreshold" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>	
					<xsd:element minOccurs="1" name="FolderPath" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>							
					<xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>
				</Configuration>
				<OverrideableParameters>
					<OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
					<OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
					<OverrideableParameter ID="FileDateThreshold" Selector="$Config/FileDateThreshold$" ParameterType="string" />
					<OverrideableParameter ID="FolderPath" Selector="$Config/FolderPath$" ParameterType="string" />	
					<OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
				</OverrideableParameters>
				<ModuleImplementation Isolation="Any">
					<Composite>
						<MemberModules>
							<DataSource ID="Scheduler" TypeID="System!System.Scheduler">
								<Scheduler>
									<SimpleReccuringSchedule>
										<Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
										<SyncTime>$Config/SyncTime$</SyncTime>
									</SimpleReccuringSchedule>
									<ExcludeDates></ExcludeDates>
								</Scheduler>
							</DataSource>
							<ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
								<ScriptName>##CompanyID##.##AppName##.##UniqueID##.Monitor.DataSource.ps1</ScriptName>
								<ScriptBody>
#=================================================================================
#  Folder and File changes since date monitoring script
#
#  Author: Kevin Holman
#  v1.0
#=================================================================================
param($FileDateThreshold, $FolderPath)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $FileDateThreshold = "01/01/2019"
# $FolderPath = "C:\Windows\temp"
#=================================================================================

# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
$ScriptName = "##CompanyID##.##AppName##.##UniqueID##.Monitor.DataSource.ps1"
$EventID = "8675"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
# Load PropertyBag function 
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n FileDateThreshold: ($FileDateThreshold) `n FolderPath: ($FolderPath) `n Running as ($whoami).")

# Test to see if the folder exists and exit with error if not
IF (!(Test-Path $FolderPath))
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"FATAL ERROR:  The expected folder ($FolderPath) was not found.")
  $bag.AddValue('Result','BadCondition')
  $bag.AddValue('Message','FolderMissing')
  $bag.AddValue('FolderPath',$FolderPath)
  $bag.AddValue('FileDateThreshold',$FileDateThreshold)
  # Return all bags
  $bag
  EXIT
}

# Clear any previous errors
$Error.Clear()
# Get items in target folder path
$FolderItems = Get-ChildItem $FolderPath -Recurse
IF ($Error) 
{ 
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR: Error while getting folderitems in path: ($FolderPath). `n Terminating script. `n Error is: ($Error).")
  $bag.AddValue('Result','BadCondition')
  $bag.AddValue('Message','GetFolderItemsFailed')
  $bag.AddValue('FolderPath',$FolderPath)
  $bag.AddValue('FileDateThreshold',$FileDateThreshold)
  # Return all bags
  $bag
  EXIT
}

# Get Date based on threshold
[datetime]$DateThreshold = Get-Date $FileDateThreshold

# Set fileschanged value to false
$FilesChanged = $false
[string]$ChangedFileList = "Files have changed: "

# Loop through each item and see if any folderitems are newer than threshold date
FOREACH ($FolderItem in $FolderItems)
{
  [datetime]$FolderItemLastWriteTime = $FolderItem.LastWriteTime
  IF ($FolderItemLastWriteTime -gt $DateThreshold)
  {
    $FilesChanged = $true
    [string]$FolderItemFullName = $FolderItem.FullName
    [string]$FolderItemLastWriteTimeStr = $FolderItemLastWriteTime.ToString()
    $ChangedFileList = $ChangedFileList + $FolderItemFullName + " " + $FolderItemLastWriteTimeStr + ", "
  }
}

IF ($FilesChanged -eq $true)
{
  IF ($ChangedFileList.Length -gt 1024)
  {
    $ChangedFileList = $ChangedFileList.Substring(0,1024)
  }
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Folder and Files have changed since threshold date of ($DateThreshold). `n ($ChangedFileList).")
  $bag.AddValue('Result','BadCondition')
  $bag.AddValue('Message',$ChangedFileList)
  $bag.AddValue('FolderPath',$FolderPath)
  $bag.AddValue('FileDateThreshold',$FileDateThreshold)
}
ELSE
{
  $bag.AddValue('Result','GoodCondition')
  $bag.AddValue('Message','Files have not changed')
  $bag.AddValue('FolderPath',$FolderPath)
  $bag.AddValue('FileDateThreshold',$FileDateThreshold)
}

# Return all bags
$bag


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
								<Parameters>
									<Parameter>
										<Name>FileDateThreshold</Name>
										<Value>$Config/FileDateThreshold$</Value>									
									</Parameter>
									<Parameter>
										<Name>FolderPath</Name>
										<Value>$Config/FolderPath$</Value>									
									</Parameter>									
								</Parameters>
								<TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
							</ProbeAction>
						</MemberModules>
						<Composition>
							<Node ID="PA">
								<Node ID="Scheduler" />
							</Node>
						</Composition>
					</Composite>
				</ModuleImplementation>
				<OutputType>System!System.PropertyBagData</OutputType>
			</DataSourceModuleType>
		</ModuleTypes>
		<MonitorTypes>
			<UnitMonitorType ID="##CompanyID##.##AppName##.##UniqueID##.Monitor.MonitorType" Accessibility="Internal">
				<MonitorTypeStates>
					<MonitorTypeState ID="GoodCondition" NoDetection="false" />
					<MonitorTypeState ID="BadCondition" NoDetection="false" />
				</MonitorTypeStates>
				<Configuration>
					<xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>
					<xsd:element minOccurs="0" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>
					<xsd:element minOccurs="1" name="FileDateThreshold" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>
					<xsd:element minOccurs="1" name="FolderPath" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>					
					<xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>
				</Configuration>
				<OverrideableParameters>
					<OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
					<OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
					<OverrideableParameter ID="FileDateThreshold" Selector="$Config/FileDateThreshold$" ParameterType="string" />
					<OverrideableParameter ID="FolderPath" Selector="$Config/FolderPath$" ParameterType="string" />	
					<OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
				</OverrideableParameters>
				<MonitorImplementation>
					<MemberModules>
						<DataSource ID="DS" TypeID="##CompanyID##.##AppName##.##UniqueID##.Monitor.DataSource">
							<IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
							<SyncTime>$Config/SyncTime$</SyncTime>
							<FileDateThreshold>$Config/FileDateThreshold$</FileDateThreshold>
							<FolderPath>$Config/FolderPath$</FolderPath>
							<TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
						</DataSource>
						<ConditionDetection ID="GoodConditionFilter" TypeID="System!System.ExpressionFilter">
							<Expression>
								<SimpleExpression>
									<ValueExpression>
										<XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
									</ValueExpression>
									<Operator>Equal</Operator>
									<ValueExpression>
										<Value Type="String">GoodCondition</Value>
									</ValueExpression>
								</SimpleExpression>
							</Expression>
						</ConditionDetection>
						<ConditionDetection ID="BadConditionFilter" TypeID="System!System.ExpressionFilter">
							<Expression>
								<SimpleExpression>
									<ValueExpression>
										<XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
									</ValueExpression>
									<Operator>Equal</Operator>
									<ValueExpression>
										<Value Type="String">BadCondition</Value>
									</ValueExpression>
								</SimpleExpression>
							</Expression>
						</ConditionDetection>
					</MemberModules>
					<RegularDetections>
						<RegularDetection MonitorTypeStateID="GoodCondition">
							<Node ID="GoodConditionFilter">
								<Node ID="DS" />
							</Node>
						</RegularDetection>
						<RegularDetection MonitorTypeStateID="BadCondition">
							<Node ID="BadConditionFilter">
								<Node ID="DS" />
							</Node>
						</RegularDetection>
					</RegularDetections>
					<OnDemandDetections>
						<OnDemandDetection MonitorTypeStateID="GoodCondition">
							<Node ID="GoodConditionFilter">
								<Node ID="DS" />
							</Node>
						</OnDemandDetection>
						<OnDemandDetection MonitorTypeStateID="BadCondition">
							<Node ID="BadConditionFilter">
								<Node ID="DS" />
							</Node>
						</OnDemandDetection>
					</OnDemandDetections>
				</MonitorImplementation>
			</UnitMonitorType>
		</MonitorTypes>
	</TypeDefinitions>
	<Monitoring>
		<Monitors>
			<UnitMonitor ID="##CompanyID##.##AppName##.##UniqueID##.Monitor" Accessibility="Public" Enabled="true" Target="##ClassID##" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="##CompanyID##.##AppName##.##UniqueID##.Monitor.MonitorType" ConfirmDelivery="true">
				<Category>AvailabilityHealth</Category>
				<AlertSettings AlertMessage="FXS.eSocketPOS.PostilionFolder.Monitor.AlertMessage">
					<AlertOnState>Warning</AlertOnState>
					<AutoResolve>true</AutoResolve>
					<AlertPriority>Normal</AlertPriority>
					<AlertSeverity>Error</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='Result']$</AlertParameter1>
						<AlertParameter2>$Data/Context/Property[@Name='Message']$</AlertParameter2>
						<AlertParameter3>$Data/Context/Property[@Name='FolderPath']$</AlertParameter3>
						<AlertParameter4>$Data/Context/Property[@Name='FileDateThreshold']$</AlertParameter4>
          </AlertParameters>					
				</AlertSettings>
				<OperationalStates>
					<OperationalState ID="GoodCondition" MonitorTypeStateID="GoodCondition" HealthState="Success" />
					<OperationalState ID="BadCondition" MonitorTypeStateID="BadCondition" HealthState="Warning" />
				</OperationalStates>
				<Configuration>
					<IntervalSeconds>14400</IntervalSeconds>
					<SyncTime></SyncTime>
					<FileDateThreshold>01/01/2019</FileDateThreshold>
					<FolderPath>C:\Windows\temp</FolderPath>
					<TimeoutSeconds>120</TimeoutSeconds>
				</Configuration>
			</UnitMonitor>
		</Monitors>
	</Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="##CompanyID##.##AppName##.##UniqueID##.Monitor.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.Monitor">
          <Name>##CompanyID## ##AppName## ##UniqueID## Monitor</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.Monitor" SubElementID="GoodCondition">
          <Name>GoodCondition</Name>
        </DisplayString>
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.Monitor" SubElementID="BadCondition">
          <Name>BadCondition</Name>
        </DisplayString>
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.Monitor.AlertMessage">
          <Name>##CompanyID## ##AppName## ##UniqueID## Monitor: Files have changed</Name>
          <Description>##CompanyID## ##AppName## ##UniqueID## Monitor - result: {0}
FolderPath: {2}
FileDateThreshold: {3}
Message: {1}</Description>
        </DisplayString>		
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPackFragment>
