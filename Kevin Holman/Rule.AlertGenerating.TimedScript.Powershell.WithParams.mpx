<ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<!--
%%
Description:
  A Rule which runs a timed PowerShell script (WITH parameters) as the DataSource and ALERTS based on matching a condition detection
  CompanyID - is a short abbreviation for your company with NO SPACES OR SPECIAL CHARACTERS ALLOWED
  AppName - is a short name for your app with NO SPACES OR SPECIAL CHARACTERS ALLOWED 
  UniqueID - Is a unique short description of the workflow purpose (NO SPACES OR SPECIAL CHARACTERS ALLOWED) such as "CountFilesInFolder"  
  ClassID - is the targeted class such as your custom class or Windows!Microsoft.Windows.Server.OperatingSystem  
  
Version: 1.2
LastModified: 4-Nov-2017
%%

In this fragment you need to replace:
  ##CompanyID##
  ##AppName##
  ##UniqueID##
  ##ClassID##

This fragment depends on references:
  RequiredReference: Alias="System", ID="System.Library"
  RequiredReference: Alias="Windows", ID="Microsoft.Windows.Library"
  RequiredReference: Alias="Health", ID="System.Health.Library"	

@@Author=Kevin Holman@@  
--> 
  <TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="##CompanyID##.##AppName##.##UniqueID##.Script.Alert.Rule.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
		  <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
		  <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
		  <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />	
		  <xsd:element minOccurs="1" type="xsd:integer" name="FileCountThreshold" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
		  <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
		  <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
		  <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="FileCountThreshold" Selector="$Config/FileCountThreshold$" ParameterType="int" />		  
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
					<SyncTime>$Config/SyncTime$</SyncTime>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>##CompanyID##.##AppName##.##UniqueID##.Script.Alert.Rule.Datasource.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Describe Script Here
#
#  Author: Kevin Holman
#  v1.0
#=================================================================================
param($FileCountThreshold)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $FileCountThreshold = "25"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "##CompanyID##.##AppName##.##UniqueID##.Script.Alert.Rule.Datasource.ps1"
$EventID = "1234"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================
#For a simple example - get files in Windows Temp:
[int]$TempCount = (Get-ChildItem C:\Windows\Temp).Count

IF ($TempCount -lt 1)
{
  $Result = "BAD"
  $Message = "The number of files in temp was zero or we failed to get the data"
}
ELSEIF ($TempCount -ge $FileCountThreshold)
{
  $Result = "BAD"
  $Message = "The number of files in temp was greater than ($FileCountThreshold)"
}
ELSE
{
  $Result = "GOOD"
}

#Check the value of Result
IF ($Result -eq "GOOD")
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0, "`n Good Condition Found `n FilesInTemp = ($TempCount)")
  $bag.AddValue('Result',$Result)
}
ELSE
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0, "`n Bad Condition Found. `n FilesInTemp = ($TempCount)")
  $bag.AddValue('Result',$Result)
  $bag.AddValue('TempCount',$TempCount)
  $bag.AddValue('Message',$Message)
}

# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>FileCountThreshold</Name>
                    <Value>$Config/FileCountThreshold$</Value>
                  </Parameter>
                </Parameters>
				<TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>			  
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
    </ModuleTypes>
  </TypeDefinitions>
  <Monitoring>
    <Rules>
      <Rule ID="##CompanyID##.##AppName##.##UniqueID##.Script.Alert.Rule" Enabled="true" Target="##ClassID##" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="##CompanyID##.##AppName##.##UniqueID##.Script.Alert.Rule.Datasource">
            <IntervalSeconds>3600</IntervalSeconds>
			<SyncTime></SyncTime>
			<TimeoutSeconds>120</TimeoutSeconds>
			<FileCountThreshold>25</FileCountThreshold>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="CD" TypeID="System!System.ExpressionFilter">
		  <Expression>
		    <SimpleExpression>
			  <ValueExpression>
			    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
			  </ValueExpression>
			  <Operator>Equal</Operator>
			  <ValueExpression>
			    <Value Type="String">BAD</Value>
			  </ValueExpression>
		    </SimpleExpression>
		  </Expression>
        </ConditionDetection>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>  <!-- 0=Low, 1=Medium, 2=High -->
            <Severity>1</Severity>  <!-- 0=Information, 1=Warning, 2=Critical -->
            <AlertMessageId>$MPElement[Name="##CompanyID##.##AppName##.##UniqueID##.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Result']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='TempCount']$</AlertParameter2>
			  <AlertParameter3>$Data/Property[@Name='Message']$</AlertParameter3>
            </AlertParameters>
			<Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
    </Rules>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="##CompanyID##.##AppName##.##UniqueID##.Script.Alert.Rule.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.Script.Alert.Rule">
          <Name>##CompanyID## ##AppName## ##UniqueID## Script Alert Rule</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.Script.Alert.Rule.AlertMessage">
          <Name>##CompanyID## ##AppName## ##UniqueID## Script Alert Rule Triggered</Name>
          <Description>##CompanyID## ##AppName## ##UniqueID## Script Alert Rule: detected a bad condition
Result: {0}
Files in Temp: {1}
Message: {2}</Description>
        </DisplayString>		
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPackFragment>
