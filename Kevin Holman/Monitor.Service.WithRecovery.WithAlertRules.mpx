<ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<!--
%%
Description:
  A MONITOR for a service that will ONLY issue state changes and NO ALERTS on the monitor itself.  
  Includes a recovery script to recover the service.  The recovery is enabled by default.
  Also includes alert rules based on events from the success or failure of the recovery script
  CompanyID - is a short abbreviation for your company with NO SPACES OR SPECIAL CHARACTERS ALLOWED
  AppName - is a short name for your app with NO SPACES OR SPECIAL CHARACTERS ALLOWED 
  ClassID - is the targeted class such as your custom class or Windows!Microsoft.Windows.Server.OperatingSystem   
  ServiceName - must be the short name of the service as seen in the registry
  UniqueID - We need a Unique ID for this Monitor to reuse the fragment.  If your service name contains spaces - create a shortened ServiceName with NO SPACES OR SPECIAL CHARACTERS ALLOWED    

Version: 1.2
LastModified: 14-Oct-2018
%%

In this fragment you need to replace:
  ##CompanyID##
  ##AppName##
  ##ClassID##
  ##ServiceName##
  ##UniqueID##  

This fragment depends on references:
  RequiredReference: Alias="Windows", ID="Microsoft.Windows.Library"
  RequiredReference: Alias="Health", ID="System.Health.Library"

@@Author=Kevin Holman@@  
--> 
  <Monitoring>
	<Rules>
	  <Rule ID="##CompanyID##.##AppName##.##UniqueID##.ServiceFoundRunning.Recovery.Rule" Enabled="true" Target="##ClassID##" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3754</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
				<Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>##ServiceName##</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>  <!-- 0=Low 1=Medium 2=High -->
            <Severity>2</Severity>  <!-- 0=Information 1=Warning 2=Critical -->
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="##CompanyID##.##AppName##.##UniqueID##.ServiceFoundRunning.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="##CompanyID##.##AppName##.##UniqueID##.ServiceRecoveryFailed.Recovery.Rule" Enabled="true" Target="##ClassID##" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3758</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
				<Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>##ServiceName##</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>  <!-- 0=Low 1=Medium 2=High -->
            <Severity>2</Severity>  <!-- 0=Information 1=Warning 2=Critical -->
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="##CompanyID##.##AppName##.##UniqueID##.ServiceRecoveryFailed.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
	  <Rule ID="##CompanyID##.##AppName##.##UniqueID##.TooManyRecoveryAttempts.Recovery.Rule" Enabled="true" Target="##ClassID##" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3759</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
				<Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>##ServiceName##</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>  <!-- 0=Low 1=Medium 2=High -->
            <Severity>2</Severity>  <!-- 0=Information 1=Warning 2=Critical -->
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="##CompanyID##.##AppName##.##UniqueID##.TooManyRecoveryAttempts.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
    </Rules>  
    <Monitors>
      <UnitMonitor ID="##CompanyID##.##AppName##.##UniqueID##.Service.Monitor" Accessibility="Public" Enabled="true" Target="##ClassID##" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.CheckNTServiceStateMonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <OperationalStates>
          <OperationalState ID="Running" MonitorTypeStateID="Running" HealthState="Success" />
          <OperationalState ID="NotRunning" MonitorTypeStateID="NotRunning" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <ComputerName />
          <ServiceName>##ServiceName##</ServiceName>
          <CheckStartupType />
        </Configuration>
      </UnitMonitor>	  
    </Monitors>
    <Recoveries>
      <Recovery ID="##CompanyID##.##AppName##.##UniqueID##.Service.Recovery" Accessibility="Public" Enabled="true" Target="##ClassID##" Monitor="##CompanyID##.##AppName##.##ServiceName##.Service.Monitor" ResetMonitor="false" ExecuteOnState="Error" Remotable="true" Timeout="300">
        <Category>Custom</Category>
        <WriteAction ID="VBScriptWA" TypeID="Windows!Microsoft.Windows.ScriptWriteAction">
          <ScriptName>ServiceRecovery.vbs</ScriptName>
          <Arguments />
          <ScriptBody><![CDATA[
'==========================================================================
'
' COMMENT: This is a recovery script to recover a service
'
'==========================================================================
Option Explicit
SetLocale("en-us")

'Capture script start time
  Dim StartTime,EndTime,sTime
  StartTime = Now

'Load the MOMScriptAPI and log a starting event  
  Dim oAPI
  Set oAPI = CreateObject("MOM.ScriptAPI")
  Call oAPI.LogScriptEvent("ServiceRecovery.vbs",3750,0,"Service Recovery script is starting for service: ##ServiceName##")

Dim strComputer, strService, strStartMode, strState, objCount 
'The script will always be run on the machine that generated the monitor error
  strComputer = "."
 
'Define the service we will be restarting 
  strService = "##ServiceName##"

'Record the current state of each service before recovery in an event
  Dim strServiceState
  ServiceStateSub(strService)
  strServiceState = strState
  Call oAPI.LogScriptEvent("ServiceRecovery.vbs",3751,0,"Current service state before recovery is: " & strService & " : " & strServiceState)

'Stop script if all services are running
  If (strServiceState = "Running") Then
    Call oAPI.LogScriptEvent("ServiceRecovery.vbs",3752,2,"Service was found to be in the running state, recovery should not run, ending script")
    Wscript.Quit
  End If

'At least one service is stopped to cause this recovery, stopping all three services so we can start them in order
'You would only use this section if you had multiple services and they needed to be started in a specific order
'  Call oAPI.LogScriptEvent("ServiceRecovery.vbs",3753,0,"At least one service was found not running.  Recovery will run.  Attempting to stop multiple services now")
'  ServiceStopSub(strService1)
'  ServiceStopSub(strService2)
'  ServiceStopSub(strService3)
  
'Check to make sure all services are actually in stopped state
' Optional Wait 15 seconds for slow services to stop
'  Wscript.Sleep 15000
'  ServiceStateSub(strService)
'  strServiceState = strState

'Stop script if all services are not stopped
  If (strServiceState <> "Stopped") Then
    Call oAPI.LogScriptEvent("ServiceRecovery.vbs",3754,2,"Recovery script found service is not in stopped state.  Manual intervention is required, ending script.  Current service state is: " & strService & " : " & strServiceState)
    Wscript.Quit
  Else
    Call oAPI.LogScriptEvent("ServiceRecovery.vbs",3755,0,"Recovery script verified all services in stopped state.  Continuing.")
  End If
  
'Start services in order then sleep to let them start up
  Call oAPI.LogScriptEvent("ServiceRecovery.vbs",3756,0,"Attempting to start all services")
	Dim errReturn 'Restart Services and watch to see if the command executed without error
	ServiceStartSub(strService)
	Wscript.sleep 10000

'Check service state to ensure all services started
  ServiceStateSub(strService)
  strServiceState = strState
	
'Log success or fail of recovery
  If (strServiceState = "Running")  Then
    Call oAPI.LogScriptEvent("ServiceRecovery.vbs",3757,0,"All services were successfully started and then found to be running")
  Else
    Call oAPI.LogScriptEvent("ServiceRecovery.vbs",3758,2,"Recovery script failed to start all services.  Manual intervention is required.  Current service state is: " & strService & " : " & strServiceState)
  End If	
	
'Check to see if this recovery script has been run three times in the last 60 minutes for loop detection
     Dim dtmStartDate, iCount, colEvents, objWMIService, objEvent
	 Set dtmStartDate = CreateObject("WbemScripting.SWbemDateTime")
	 dtmStartDate.SetVarDate dateadd("n", -60, now)' CONVERT_TO_LOCAL_TIME
	 
	 iCount = 0
	 Set objWMIService = GetObject("winmgmts:" _
	     & "{impersonationLevel=impersonate,(Security)}!\\" _
	     & strComputer & "\root\cimv2")
	 Set colEvents = objWMIService.ExecQuery _
	     ("Select * from Win32_NTLogEvent Where Logfile = 'Operations Manager' and " _
	        & "TimeWritten > '" & dtmStartDate & "' and EventCode = 3750") 
	 For Each objEvent In colEvents
		iCount = iCount+1  
	 Next
	If iCount => 3 Then
		EndTime = Now
        sTime = DateDiff("s", StartTime, EndTime)
		Call oAPI.LogScriptEvent("ServiceRecovery.vbs",3759,2,"Recovery script attempted to restart the " & strService & " service 3 or more times in the last hour, script ending after " & sTime & " seconds") 
		WScript.Quit
	ElseIf iCount < 3 Then
	        EndTime = Now
        sTime = DateDiff("s", StartTime, EndTime)
		Call oAPI.LogScriptEvent("ServiceRecovery.vbs",3760,0,"Recovery script restarted " & strService & " service less than 3 times in the last hour, script ending after " & sTime & " seconds")
	End If

Wscript.Quit


'==================================================================================
' Subroutine:	ServiceStateSub
' Purpose:	Gets the service state and startmode from WMI
'==================================================================================
Sub ServiceStateSub(strService)
	Dim objWMIService, colRunningServices, objService 
	Set objWMIService = GetObject("winmgmts:" _
	    & "{impersonationLevel=impersonate}!\\" & strComputer & "\root\cimv2")
	Set colRunningServices = objWMIService.ExecQuery _
	    ("Select * from Win32_Service where Name = '"& strService & "'")
	For Each objService in colRunningServices 
	    strState = objService.State
	    strStartMode = objService.StartMode
	Next
End Sub

'==================================================================================
' Subroutine:	ServiceStartSub
' Purpose:	Starts a service
'==================================================================================
Sub ServiceStartSub(strService)
	Dim objWMIService, colRunningServices, objService, colServiceList
	Set objWMIService = GetObject("winmgmts:" _
	    & "{impersonationLevel=impersonate}!\\" & strComputer & "\root\cimv2")
	Set colServiceList = objWMIService.ExecQuery _
	    ("Select * from Win32_Service where Name='"& strService & "'")
	For Each objService in colServiceList
	    errReturn = objService.StartService()
	Next
End Sub

'==================================================================================
' Subroutine:	ServiceStopSub
' Purpose:	Stops a service
'==================================================================================
Sub ServiceStopSub(strService)
	Dim objWMIService, colRunningServices, objService, colServiceList
	Set objWMIService = GetObject("winmgmts:" _
	    & "{impersonationLevel=impersonate}!\\" & strComputer & "\root\cimv2")
	Set colServiceList = objWMIService.ExecQuery _
	    ("Select * from Win32_Service where Name='"& strService & "'")
	For Each objService in colServiceList
	    errReturn = objService.StopService()
	Next
End Sub
          ]]></ScriptBody>		  
          <TimeoutSeconds>300</TimeoutSeconds>
        </WriteAction>
      </Recovery>
    </Recoveries> 
  </Monitoring>	
  <Presentation>
    <StringResources>
	  <StringResource ID="##CompanyID##.##AppName##.##UniqueID##.ServiceFoundRunning.Recovery.Rule.AlertMessage" />
      <StringResource ID="##CompanyID##.##AppName##.##UniqueID##.ServiceRecoveryFailed.Recovery.Rule.AlertMessage" />
	  <StringResource ID="##CompanyID##.##AppName##.##UniqueID##.TooManyRecoveryAttempts.Recovery.Rule.AlertMessage" />
    </StringResources>
  </Presentation>  
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.Service.Monitor">
          <Name>##CompanyID## ##AppName## ##ServiceName## Service Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.Service.Monitor" SubElementID="Running">
          <Name>Running</Name>
        </DisplayString>
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.Service.Monitor" SubElementID="NotRunning">
          <Name>Not Running</Name>
        </DisplayString>
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.Service.Recovery">
          <Name>##CompanyID## ##AppName## ##ServiceName## Service Recovery</Name>
        </DisplayString>
		<DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.ServiceFoundRunning.Recovery.Rule">
          <Name>##CompanyID## ##AppName## ##ServiceName## Recovery script found service is not in stopped state</Name>
        </DisplayString>
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.ServiceFoundRunning.Recovery.Rule.AlertMessage">
          <Name>##CompanyID## ##AppName## ##ServiceName## Recovery script found service is not in stopped state</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>		  
		<DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.ServiceRecoveryFailed.Recovery.Rule">
          <Name>##CompanyID## ##AppName## ##ServiceName## Recovery script failed to start all services</Name>
        </DisplayString>
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.ServiceRecoveryFailed.Recovery.Rule.AlertMessage">
          <Name>##CompanyID## ##AppName## ##ServiceName## Recovery script failed to start all services</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
		<DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.TooManyRecoveryAttempts.Recovery.Rule">
          <Name>##CompanyID## ##AppName## ##ServiceName## Recovery script attempted to restart the service 3 times in an hour</Name>
        </DisplayString>
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.TooManyRecoveryAttempts.Recovery.Rule.AlertMessage">
          <Name>##CompanyID## ##AppName## ##ServiceName## Recovery script attempted to restart the service 3 times in an hour</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>		
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPackFragment>
